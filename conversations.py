# conversations.py
import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import pytz

from constants import (
    ASK_PROJECT_NAME, ASK_PROJECT_DEADLINE, ASK_PROJECT_GOAL,
    ACTIVE_CONVERSATION_KEY, ADD_PROJECT_CONV_STATE_VALUE,
    LAST_PROCESSED_IN_CONV_MSG_ID_KEY,
    ASK_TASK_NAME, ASK_TASK_PROJECT_LINK, ASK_TASK_DEADLINE_STATE, ASK_TASK_GOAL,
    ADD_TASK_CONV_STATE_VALUE, NEW_TASK_INFO_KEY,
    PENDING_PROGRESS_UPDATE_KEY,
    ASK_PROGRESS_ITEM_TYPE, ASK_PROGRESS_ITEM_NAME, ASK_PROGRESS_DESCRIPTION, 
    UPDATE_PROGRESS_CONV_STATE_VALUE, ITEM_FOR_PROGRESS_UPDATE_KEY,
    CALLBACK_UPDATE_PARENT_PROJECT_PREFIX # –î–ª—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
)
   
from utils import parse_natural_deadline_to_date, generate_id
from data_handler import load_data, save_data, find_item_by_name_or_id
from llm_handler import interpret_progress_description

logger = logging.getLogger(__name__)

# --- –î–∏–∞–ª–æ–≥ –¥–ª—è –ü–†–û–ï–ö–¢–û–í ---
async def new_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; logger.debug(f"/newproject –æ—Ç {uid}")
    context.user_data.pop('new_project_info', None)
    context.user_data[ACTIVE_CONVERSATION_KEY] = ADD_PROJECT_CONV_STATE_VALUE
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞? (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
    return ASK_PROJECT_NAME

async def received_project_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; name = update.message.text.strip()
    if not name: await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò–ª–∏ /cancel."); return ASK_PROJECT_NAME
    context.user_data['new_project_info'] = {'name': name}
    await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{name}'. –î–µ–¥–ª–∞–π–Ω? ('–Ω–µ—Ç', '–∑–∞–≤—Ç—Ä–∞', –î–î.–ú–ú.–ì–ì–ì–ì) /cancel")
    return ASK_PROJECT_DEADLINE

async def received_project_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ —Ü–µ–ª—å
    uid = update.effective_user.id; deadline_txt = update.message.text.strip().lower()
    info = context.user_data.get('new_project_info')
    if not info or 'name' not in info: # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /newproject")
        context.user_data.pop('new_project_info', None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        return ConversationHandler.END

    final_dl_str = None
    dl_msg_part = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
    if deadline_txt not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'no', 'skip', '']:
        parsed_dl = parse_natural_deadline_to_date(deadline_txt)
        if parsed_dl:
            final_dl_str = parsed_dl.strftime('%Y-%m-%d')
            dl_msg_part = f"—Å –¥–µ–¥–ª–∞–π–Ω–æ–º {final_dl_str}"
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É '{deadline_txt}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'/'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. /cancel")
            return ASK_PROJECT_DEADLINE # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ

    info['deadline'] = final_dl_str
    info['deadline_message_part'] = dl_msg_part # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['new_project_info'] = info

    await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{info['name']}' ({dl_msg_part}).\n"
                                    "–ö–∞–∫–æ–π –æ–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö?\n"
                                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ %, –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–∞–¥–∞—á, —á–∞—Å–æ–≤ –∏ —Ç.–¥.)\n"
                                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±—É–¥–µ—Ç 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é). /cancel")
    return ASK_PROJECT_GOAL # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ü–µ–ª–∏

async def received_project_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id
    goal_input_text = update.message.text.strip()
    info = context.user_data.get('new_project_info')

    if not info or 'name' not in info or 'deadline_message_part' not in info: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã info
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /newproject.")
        context.user_data.pop('new_project_info', None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
        return ConversationHandler.END

    project_name = info['name']
    final_dl_str = info.get('deadline') # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    dl_msg = info['deadline_message_part']
    total_units = 100 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if goal_input_text.lower() not in ['/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
        try:
            parsed_goal = int(goal_input_text)
            if parsed_goal > 0:
                total_units = parsed_goal
            else:
                await update.message.reply_text("–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–¥–ª—è 100). /cancel")
                return ASK_PROJECT_GOAL
        except ValueError:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–¥–ª—è 100). /cancel")
            return ASK_PROJECT_GOAL
    
    goal_msg = f"—Å —Ü–µ–ª—å—é –≤ {total_units} –µ–¥."

    data = load_data()
    new_id = generate_id("proj")
    created_at = datetime.now(pytz.utc).isoformat()
    data.setdefault("projects", {})
    data["projects"][new_id] = {
        "id": new_id, "name": project_name, "deadline": final_dl_str,
        "owner_id": str(uid), "created_at": created_at, "status": "active",
        "total_units": total_units, # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –¶–ï–õ–¨
        "current_units": 0, "last_report_day_counter": 0,
        "is_public": False
    }
    save_data(data)
    await update.message.reply_text(f"üéâ –ü—Ä–æ–µ–∫—Ç '{project_name}' {dl_msg} {goal_msg} —Å–æ–∑–¥–∞–Ω!\nID: `{new_id}`", parse_mode='Markdown')
    
    context.user_data.pop('new_project_info', None)
    context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
    context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
    return ConversationHandler.END


# --- –î–∏–∞–ª–æ–≥ –¥–ª—è –ó–ê–î–ê–ß ---
async def new_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; logger.debug(f"/newtask –æ—Ç {uid}")
    context.user_data.pop(NEW_TASK_INFO_KEY, None)
    context.user_data[ACTIVE_CONVERSATION_KEY] = ADD_TASK_CONV_STATE_VALUE
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏? (/cancel)")
    return ASK_TASK_NAME

async def received_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; task_name = update.message.text.strip()
    if not task_name: await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. /cancel"); return ASK_TASK_NAME
    context.user_data[NEW_TASK_INFO_KEY] = {'name': task_name}
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞: '{task_name}'.\n–ü—Ä–æ–µ–∫—Ç? (–Ω–∞–∑–≤–∞–Ω–∏–µ/ID –∏–ª–∏ '–Ω–µ—Ç') /cancel")
    return ASK_TASK_PROJECT_LINK

async def received_task_project_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; project_input = update.message.text.strip().lower()
    task_info = context.user_data.get(NEW_TASK_INFO_KEY)
    if not task_info or 'name' not in task_info:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. /newtask"); context.user_data.pop(NEW_TASK_INFO_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id; return ConversationHandler.END
    
    project_id, project_fb_msg = None, "–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
    if project_input not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'no', 'skip', '']:
        found_project = find_item_by_name_or_id(project_input, "project", load_data())
        if found_project:
            project_id = found_project["id"]
            project_fb_msg = f"–∫ –ø—Ä–æ–µ–∫—Ç—É '{found_project['name']}'"
        else:
            await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'/'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. /cancel")
            return ASK_TASK_PROJECT_LINK
            
    task_info['project_id'] = project_id
    task_info['project_feedback'] = project_fb_msg
    context.user_data[NEW_TASK_INFO_KEY] = task_info
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_info['name']}' ({project_fb_msg}).\n–î–µ–¥–ª–∞–π–Ω? ('–∑–∞–≤—Ç—Ä–∞', '–Ω–µ—Ç') /cancel")
    return ASK_TASK_DEADLINE_STATE

async def received_task_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ —Ü–µ–ª—å –∑–∞–¥–∞—á–∏
    uid = update.effective_user.id; deadline_txt = update.message.text.strip().lower()
    task_info = context.user_data.get(NEW_TASK_INFO_KEY)
    if not task_info or 'name' not in task_info: # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /newtask")
        context.user_data.pop(NEW_TASK_INFO_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        return ConversationHandler.END

    final_dl_str = None
    dl_msg_part = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
    if deadline_txt not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'no', 'skip', '']:
        parsed_dl = parse_natural_deadline_to_date(deadline_txt)
        if parsed_dl:
            final_dl_str = parsed_dl.strftime('%Y-%m-%d')
            dl_msg_part = f"—Å –¥–µ–¥–ª–∞–π–Ω–æ–º {final_dl_str}"
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É '{deadline_txt}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'/'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. /cancel")
            return ASK_TASK_DEADLINE_STATE

    task_info['deadline'] = final_dl_str
    task_info['deadline_message_part'] = dl_msg_part
    context.user_data[NEW_TASK_INFO_KEY] = task_info

    project_fb = task_info.get('project_feedback', "–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏") # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_info['name']}' ({project_fb}) ({dl_msg_part}).\n"
                                    "–ö–∞–∫–æ–π –æ–±—â–∏–π –æ–±—ä–µ–º –∑–∞–¥–∞—á–∏ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö?\n"
                                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ç.–¥.)\n"
                                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (—Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∞ - 0 –µ–¥.). /cancel")
    return ASK_TASK_GOAL # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ü–µ–ª–∏

async def received_task_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id
    goal_input_text = update.message.text.strip()
    task_info = context.user_data.get(NEW_TASK_INFO_KEY)

    if not task_info or 'name' not in task_info or 'deadline_message_part' not in task_info: # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /newtask.")
        context.user_data.pop(NEW_TASK_INFO_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
        return ConversationHandler.END

    task_name = task_info['name']
    project_id = task_info.get('project_id')
    project_fb = task_info.get('project_feedback', "–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏")
    final_dl_str = task_info.get('deadline')
    dl_msg = task_info['deadline_message_part']
    total_units = 0 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–¥–∞—á

    if goal_input_text.lower() not in ['/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
        try:
            parsed_goal = int(goal_input_text)
            if parsed_goal > 0:
                total_units = parsed_goal
            else:
                await update.message.reply_text("–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–¥–ª—è 0). /cancel")
                return ASK_TASK_GOAL
        except ValueError:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏–ª–∏ /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–¥–ª—è 0). /cancel")
            return ASK_TASK_GOAL
    
    goal_msg = f"—Å —Ü–µ–ª—å—é –≤ {total_units} –µ–¥." if total_units > 0 else "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–∏"

    data = load_data()
    new_id = generate_id("task")
    created_at = datetime.now(pytz.utc).isoformat()
    data.setdefault("tasks", {})
    data["tasks"][new_id] = {
        "id": new_id, "name": task_name, "deadline": final_dl_str,
        "project_id": project_id, "owner_id": str(uid),
        "created_at": created_at, "status": "active",
        "total_units": total_units, # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –¶–ï–õ–¨
        "current_units": 0,
        "is_public": False
    }
    save_data(data)
    await update.message.reply_text(f"üí™ –ó–∞–¥–∞—á–∞ '{task_name}' ({project_fb}) {dl_msg} {goal_msg} —Å–æ–∑–¥–∞–Ω–∞!\nID: `{new_id}`", parse_mode='Markdown')
    
    context.user_data.pop(NEW_TASK_INFO_KEY, None)
    context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
    context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
    return ConversationHandler.END
    
# --- –î–∏–∞–ª–æ–≥ –¥–ª—è –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /progress) ---
async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; logger.debug(f"/progress –æ—Ç {uid}")
    context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None); context.user_data[ACTIVE_CONVERSATION_KEY] = UPDATE_PROGRESS_CONV_STATE_VALUE
    logger.debug(f"–î–ª—è {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {ACTIVE_CONVERSATION_KEY}={UPDATE_PROGRESS_CONV_STATE_VALUE}")
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–µ–∫—Ç",callback_data="progress_item_type_project"),InlineKeyboardButton("–ó–∞–¥–∞—á—É",callback_data="progress_item_type_task")],[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞",callback_data="progress_item_type_cancel")]]
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —á–µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å?",reply_markup=InlineKeyboardMarkup(keyboard)); return ASK_PROGRESS_ITEM_TYPE
async def received_progress_item_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer(); uid = update.effective_user.id; choice = query.data
    if choice == "progress_item_type_cancel":
        await query.edit_message_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        # LAST_PROCESSED_IN_CONV_MSG_ID_KEY –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è callback –æ—Ç–º–µ–Ω—ã
        return ConversationHandler.END
    item_type = "project" if choice == "progress_item_type_project" else "task"; context.user_data[ITEM_FOR_PROGRESS_UPDATE_KEY] = {'llm_item_type': item_type}
    type_rus = "–ø—Ä–æ–µ–∫—Ç–∞" if item_type == "project" else "–∑–∞–¥–∞—á–∏"; await query.edit_message_text(f"ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ {type_rus}? (/cancel)"); return ASK_PROGRESS_ITEM_NAME
async def received_progress_item_name_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; name_hint = update.message.text.strip(); item_info = context.user_data.get(ITEM_FOR_PROGRESS_UPDATE_KEY, {}); llm_item_type = item_info.get('llm_item_type')
    if not name_hint: await update.message.reply_text("–ò–º—è/ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. /cancel"); return ASK_PROGRESS_ITEM_NAME
    found_item = find_item_by_name_or_id(name_hint, llm_item_type, load_data())
    if not found_item: await update.message.reply_text(f"–ù–µ –Ω–∞—à–µ–ª '{name_hint}'. /cancel"); return ASK_PROGRESS_ITEM_NAME
    item_info.update({'id':found_item['id'],'name':found_item['name'],'item_type_db':found_item['item_type_db'],'current_units':found_item.get('current_units',0),'total_units':found_item.get('total_units',0)})
    context.user_data[ITEM_FOR_PROGRESS_UPDATE_KEY] = item_info
    await update.message.reply_text(f"–û–±–Ω–æ–≤–ª—è–µ–º {found_item['item_type_db']} '{found_item['name']}'.\n–ö–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å? ('+5', '50%', '–≥–æ—Ç–æ–≤–æ') /cancel"); return ASK_PROGRESS_DESCRIPTION

async def received_progress_description_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; prog_desc = update.message.text.strip(); item_info = context.user_data.get(ITEM_FOR_PROGRESS_UPDATE_KEY)
    if not item_info or not item_info.get('id'):
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. /progress"); context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id; return ConversationHandler.END

    item_original_name = item_info['name']

    total_u = item_info.get('total_units',0); current_u = item_info.get('current_units',0)
    prog_interp = await interpret_progress_description(prog_desc, total_u if total_u > 0 else 100)
    if not prog_interp or prog_interp.get("type")=="unknown" or prog_interp.get("value") is None:
        await update.message.reply_text(f"–ù–µ –ø–æ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ: '{prog_desc}'. –ï—â–µ —Ä–∞–∑. /cancel"); return ASK_PROGRESS_DESCRIPTION
    new_calc=-1; p_type=prog_interp.get("type"); p_val_str=str(prog_interp.get("value","0")); p_val=0
    try:p_val=int(float(p_val_str))
    except ValueError: await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç LLM: {p_val_str}. /cancel"); return ASK_PROGRESS_DESCRIPTION
    if p_type=="units":new_calc=current_u+p_val
    elif p_type=="percent":base=total_u if total_u>0 else 100;new_calc=round((p_val/100)*base);_=new_calc=p_val if total_u==0 else new_calc
    elif p_type=="absolute_units_set":new_calc=p_val
    elif p_type=="complete":new_calc=total_u if total_u>0 else 100
    if new_calc<0:new_calc=0
    if total_u>0 and new_calc>total_u:new_calc=total_u
    if new_calc==-1: await update.message.reply_text(f"–ù–µ –≤—ã—á–∏—Å–ª–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑: '{prog_desc}'. /cancel"); return ASK_PROGRESS_DESCRIPTION
    if new_calc==current_u: 
        await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è '{item_info['name']}' –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ó–∞–≤–µ—Ä—à–∞—é."); context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None); context.user_data.pop(ACTIVE_CONVERSATION_KEY, None)
        context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id; return ConversationHandler.END
    
    pending_cb = {
        'item_id': item_info['id'],
        'item_name': item_info['name'], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ item_info['name']
        'item_type_db': item_info['item_type_db'],
        'total_units': item_info.get('total_units', 0), # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º total_units
        'new_current_units': new_calc,
        'old_current_units': current_u,
        'action_type': 'update'
    }
    await ask_for_progress_confirmation(update,context,pending_cb) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
    context.user_data.pop(ACTIVE_CONVERSATION_KEY, None); context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
    return ConversationHandler.END # –≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–ª—å—à–µ –∫–Ω–æ–ø–∫–∏

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ü–†–û–ì–†–ï–°–°–ê / –ó–ê–í–ï–†–®–ï–ù–ò–Ø ---
async def ask_for_progress_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, item_info: dict):
    logger.debug(f"ask_for_progress_confirmation –ø–æ–ª—É—á–∏–ª–∞ item_info: {item_info}") # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    item_name = item_info['item_name']
    new_units = item_info['new_current_units']
    old_units = item_info['old_current_units']
    total_units = item_info.get('total_units', 0)
    action_type = item_info.get('action_type', 'update') # <<<--- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–ê –°–¢–†–û–ö–ê –ï–°–¢–¨ –ò –ü–†–ê–í–ò–õ–¨–ù–ê
    
    text = ""
    if action_type == 'complete':
        # item_type_db –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ item_info, –µ—Å–ª–∏ action_type == 'complete'
        item_type_display = item_info.get('item_type_db', '—ç–ª–µ–º–µ–Ω—Ç').capitalize() 
        text = f"–ó–∞–≤–µ—Ä—à–∏—Ç—å {item_type_display} '{item_name}'?"
        if total_units > 0:
            text += f"\n(–ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_units}/{total_units})"
        elif new_units == 100: # –ï—Å–ª–∏ total_units –±—ã–ª 0, –∏ –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ 100
            text += f"\n(–ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ 100%)"
    else: # action_type == 'update'
        text = f"–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è '{item_name}' —Å {old_units} –¥–æ {new_units}"
        if total_units > 0:
            text += f" (–∏–∑ {total_units})?"
        else:
            text += "?"
    
    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_progress_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_progress_no")
    ]]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é item_info (–≤–∫–ª—é—á–∞—è action_type) –¥–ª—è confirm_progress_update_callback
    context.user_data[PENDING_PROGRESS_UPDATE_KEY] = item_info 
    logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PENDING_PROGRESS_UPDATE_KEY: {item_info} –¥–ª—è {update.effective_user.id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if update.message: # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query and update.callback_query.message: # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞)
        # –û–±—ã—á–Ω–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –¥—Ä—É–≥–æ–≥–æ callback
        await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def confirm_progress_update_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer(); user_choice = query.data; user_id = update.effective_user.id
    original_message_id = query.message.message_id; chat_id = query.message.chat_id
    pending_update = context.user_data.pop(PENDING_PROGRESS_UPDATE_KEY, None) 
    if not pending_update: logger.warning(f"–ù–µ—Ç PENDING_PROGRESS_UPDATE_KEY –¥–ª—è {user_id}"); await query.edit_message_text("–û—à–∏–±–∫–∞."); return
    item_id = pending_update['item_id']; item_type_db = pending_update['item_type_db']; item_name = pending_update['item_name']
    new_units = pending_update['new_current_units']; action_type = pending_update.get('action_type', 'update')
    data = load_data(); item_pool_name = "projects" if item_type_db == "project" else "tasks"; item_pool = data.get(item_pool_name, {})
    if user_choice == "confirm_progress_yes":
        if item_id in item_pool:
            item_to_update = item_pool[item_id]; item_to_update['current_units'] = new_units; success_message = f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è '{item_name}' –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_units}."
            project_to_prompt_for_update_after_task = None
            if action_type == 'complete':
                item_to_update['status'] = 'completed'
                if item_to_update.get('total_units', 0) == 0 and new_units == 100: item_to_update['total_units'] = 100
                success_message = f"üëç {item_type_db.capitalize()} '{item_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!"
                logger.info(f"{item_type_db.capitalize()} '{item_name}' (ID:{item_id}) –ó–ê–í–ï–†–®–ï–ù —é–∑–µ—Ä–æ–º {user_id}.")
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (B2) - –ü–†–û–°–¢–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï +1
                if item_type_db == "task" and item_to_update.get("project_id"):
                    proj_id = item_to_update["project_id"]
                    if proj_id in data.get("projects", {}):
                        project_to_update_after_task = data["projects"][proj_id]
                        project_to_update_after_task["id"] = proj_id 
            save_data(data); await query.edit_message_text(success_message) 
            if action_type != 'complete': logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è {item_type_db} '{item_name}' ({item_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_units} —é–∑–µ—Ä–æ–º {user_id}.")
            if project_to_prompt_for_update_after_task: 
                proj_name = project_to_prompt_for_update_after_task.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
                units_to_add = 1 
                keyboard_proj = [[
                    InlineKeyboardButton(f"–î–∞ (+{units_to_add} –µ–¥.)", callback_data=f"{CALLBACK_UPDATE_PARENT_PROJECT_PREFIX}_yes_{project_to_prompt_for_update_after_task['id']}_{units_to_add}"),
                    InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=f"{CALLBACK_UPDATE_PARENT_PROJECT_PREFIX}_no_{project_to_prompt_for_update_after_task['id']}_0"),
                ]]
                await context.bot.send_message(chat_id=chat_id, text=f"–ó–∞–¥–∞—á–∞ '{item_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å {units_to_add} –µ–¥. –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É '{proj_name}'?", reply_markup=InlineKeyboardMarkup(keyboard_proj))
        else: await query.edit_message_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω {item_type_db} '{item_name}'."); logger.warning(f"{item_type_db} ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else: 
        final_message = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." if action_type == 'complete' else "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        await query.edit_message_text(final_message)
    context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã ---
async def universal_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id; active_conv = context.user_data.get(ACTIVE_CONVERSATION_KEY)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ (–±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω: {active_conv}).")
    context.user_data.pop('new_project_info', None); context.user_data.pop(NEW_TASK_INFO_KEY, None)
    context.user_data.pop(ITEM_FOR_PROGRESS_UPDATE_KEY, None) 
    # context.user_data.pop(PROJECT_ID_FOR_PROGRESS_ADD_KEY, None) # –≠—Ç–æ—Ç –∫–ª—é—á –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    context.user_data.pop(ACTIVE_CONVERSATION_KEY, None); logger.debug(f"–î–ª—è {uid} —Å–Ω—è—Ç {ACTIVE_CONVERSATION_KEY}.")
    context.user_data[LAST_PROCESSED_IN_CONV_MSG_ID_KEY] = update.message.message_id
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END