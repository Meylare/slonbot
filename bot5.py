# main_bot.py
import asyncio
import json
import logging
from datetime import datetime, date, timedelta, time
import uuid
import os
from typing import Union, List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ParseMode –¥–ª—è HTML
from telegram.error import Forbidden, BadRequest # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler, CallbackQueryHandler
)
import pytz

from llm_handler import interpret_user_input, interpret_progress_description
from data_handler import load_data, save_data, is_admin as is_user_admin_from_data, find_item_by_name_or_id
from utils import generate_id, parse_natural_deadline_to_date

from constants import (
    ASK_PROJECT_NAME, ASK_PROJECT_DEADLINE,
    ASK_TASK_NAME, ASK_TASK_PROJECT_LINK, ASK_TASK_DEADLINE_STATE,
    ACTIVE_CONVERSATION_KEY,
    ADD_PROJECT_CONV_STATE_VALUE, ADD_TASK_CONV_STATE_VALUE, UPDATE_PROGRESS_CONV_STATE_VALUE,
    LAST_PROCESSED_IN_CONV_MSG_ID_KEY, PENDING_PROGRESS_UPDATE_KEY,
    ASK_PROGRESS_ITEM_TYPE, ASK_PROGRESS_ITEM_NAME, ASK_PROGRESS_DESCRIPTION, ITEM_FOR_PROGRESS_UPDATE_KEY,
    CALLBACK_SHOW_PACE_DETAILS_PREFIX,
    CALLBACK_UPDATE_PARENT_PROJECT_PREFIX
)
from conversations import (
    new_project_command, received_project_name,
    received_project_deadline,
    new_task_command, received_task_name,
    received_task_project_link,
    received_task_deadline,
    progress_command, received_progress_item_type,
    received_progress_item_name_dialog, received_progress_description_dialog,
    universal_cancel,
    ask_for_progress_confirmation, confirm_progress_update_callback
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO # –†–µ–∫–æ–º–µ–Ω–¥—É—é INFO –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, DEBUG –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '0')
ADMIN_USER_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip() and admin_id.strip() != '0']
if not BOT_TOKEN: logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!"); exit()
if not ADMIN_USER_IDS : logger.warning("ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ main_bot.py.")


def format_deadline_for_report(dl_str: Union[str, None], status: str) -> str:
    if not dl_str:
        return "<i>–ë–µ–∑ —Å—Ä–æ–∫–∞</i>"
    try:
        dl_date = datetime.strptime(dl_str, '%Y-%m-%d').date()
        today = date.today()
        days_left = (dl_date - today).days

        if status == "completed": # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–¥—É—Ç
            return f"<s>{dl_str}</s>"

        if days_left < 0:
            return f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!</b> ({dl_str}, {-days_left} –¥. –Ω–∞–∑–∞–¥)"
        elif days_left == 0:
            return f"<b>–°–µ–≥–æ–¥–Ω—è!</b> ({dl_str})"
        else:
            return f"{dl_str} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥.)"
    except ValueError:
        return f"<i>{dl_str} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)</i>"

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ß–ï–¢–ê –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ú–ü–ê (–£–ü–†–û–©–ï–ù–ù–ê–Ø) ---
def format_pace_for_report(item_data: Dict[str, Any]) -> str:
    status_val = item_data.get('status')
    dl_str = item_data.get('deadline')
    created_at_iso = item_data.get("created_at")
    total_u = item_data.get('total_units', 0)
    curr_u = item_data.get('current_units', 0)
    forecast_str = ""

    if status_val == "active" and dl_str and created_at_iso and total_u > 0:
        try:
            created_at_dt = datetime.fromisoformat(created_at_iso.replace("Z", "+00:00"))
            created_date = created_at_dt.date()
            deadline_date = datetime.strptime(dl_str, '%Y-%m-%d').date()
            today = date.today()

            total_days_planned = (deadline_date - created_date).days
            days_passed = (today - created_date).days
            days_left_for_calc = (deadline_date - today).days
            units_left = total_u - curr_u

            if total_days_planned >= 0 and curr_u < total_u:
                required_pace_val = None
                actual_pace_val = None
                required_pace_text = "" # –ë–µ–∑ "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                if units_left <= 0: required_pace_text = "–≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ" # –ù–µ –¥–æ–ª–∂–Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—Ç—å, —Ç.–∫. curr_u < total_u
                elif days_left_for_calc > 0:
                    required_pace_val = units_left / days_left_for_calc
                    # required_pace_text = f"{required_pace_val:.1f} –µ–¥./–¥" # –£–±—Ä–∞–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                elif days_left_for_calc <=0: # –°—Ä–æ–∫ –≤—ã—à–µ–ª –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
                     required_pace_text = "—Å—Ä–æ–∫ –≤—ã—à–µ–ª"

                if curr_u > 0 and days_passed > 0:
                    actual_pace_val = curr_u / days_passed
                # elif curr_u > 0 and days_passed == 0: # –°–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
                    # actual_pace_text = "—Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è"

                if required_pace_text == "—Å—Ä–æ–∫ –≤—ã—à–µ–ª":
                    forecast_str = "<i>–¢–µ–º–ø: –°—Ä–æ–∫ –≤—ã—à–µ–ª</i> üò•"
                elif actual_pace_val is not None and required_pace_val is not None :
                    if actual_pace_val >= required_pace_val:
                        forecast_str = "<i>–¢–µ–º–ø: –£—Å–ø–µ–≤–∞–µ—Ç–µ</i> üëç"
                    else:
                        forecast_str = "<i>–¢–µ–º–ø: –ù—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å—Å—è!</i> üèÉüí®"
                elif curr_u > 0 and days_left_for_calc > 0 : # –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ —Ç–µ–º–ø –Ω–µ —è—Å–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω)
                     forecast_str = "<i>–¢–µ–º–ø: –í –ø—Ä–æ—Ü–µ—Å—Å–µ</i>"


            elif curr_u >= total_u and total_u > 0: # –£–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                forecast_str = "<i>–¢–µ–º–ø: –ó–∞–≤–µ—Ä—à–µ–Ω–æ</i> üéâ"
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º–ø–∞, forecast_str –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–∞ –≤ –æ—Ç—á–µ—Ç–µ –¥–ª—è {item_data.get('id', 'N/A')}: {e}")
            # forecast_str = "<i>–¢–µ–º–ø: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</i>" # –ú–æ–∂–Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å
    return forecast_str

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ï–ñ–ï–î–ù–ï–í–ù–´–• –û–¢–ß–ï–¢–û–í ---
async def send_daily_reports(context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    data = load_data()
    bot = context.bot
    today_date_str = date.today().strftime("%d.%m.%Y")

    for user_id_str, user_data in data.get("users", {}).items():
        if not user_data.get("receive_reports", False):
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} (–æ—Ç–∫–ª—é—á–µ–Ω—ã).")
            continue

        report_parts: List[str] = []
        user_name = user_data.get("username", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str}")

        # 1. –°–±–æ—Ä –û–ë–©–ò–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        public_projects_for_report: List[Dict[str, Any]] = []
        public_tasks_for_report: List[Dict[str, Any]] = []

        for p_id, p_data_orig in data.get("projects", {}).items():
            p_data = p_data_orig.copy() # –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π
            p_data['id_orig'] = p_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–≤—è–∑–∏
            if p_data.get("is_public") and p_data.get("status") == "active":
                public_projects_for_report.append(p_data)

        for t_id, t_data_orig in data.get("tasks", {}).items():
            t_data = t_data_orig.copy()
            t_data['id_orig'] = t_id
            if t_data.get("status") != "active":
                continue

            is_task_public = t_data.get("is_public", False)
            parent_project_id = t_data.get("project_id")
            is_parent_project_public = False
            if parent_project_id and parent_project_id in data.get("projects", {}):
                if data["projects"][parent_project_id].get("is_public"):
                    is_parent_project_public = True
            
            # –ó–∞–¥–∞—á–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—â–∏–π –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∞ —Å–∞–º–∞ public –∏–ª–∏ –µ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç public
            if is_task_public or is_parent_project_public:
                public_tasks_for_report.append(t_data)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        public_projects_for_report.sort(key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower()))
        public_tasks_for_report.sort(key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower()))

        if public_projects_for_report or public_tasks_for_report:
            report_parts.append("üì¢ <b>–û–±—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</b>")
            if public_projects_for_report:
                report_parts.append("  <u>–ü—Ä–æ–µ–∫—Ç—ã:</u>")
                for p_item in public_projects_for_report:
                    deadline_info = format_deadline_for_report(p_item.get('deadline'), p_item.get('status'))
                    progress_info = f"{p_item.get('current_units',0)}/{p_item.get('total_units',0)}" if p_item.get('total_units',0) > 0 else f"{p_item.get('current_units',0)} –µ–¥."
                    pace_info = format_pace_for_report(p_item)
                    report_parts.append(f"    ‚ñ´Ô∏è {p_item['name']} ({progress_info})\n      <pre>‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info} {pace_info}".strip())
                    # –ó–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –æ–±—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                    project_specific_tasks = [
                        task for task in public_tasks_for_report 
                        if task.get("project_id") == p_item['id_orig']
                    ]
                    for t_item_proj in project_specific_tasks:
                        deadline_info_t = format_deadline_for_report(t_item_proj.get('deadline'), t_item_proj.get('status'))
                        progress_info_t = f"{t_item_proj.get('current_units',0)}/{t_item_proj.get('total_units',0)}" if t_item_proj.get('total_units',0) > 0 else f"{t_item_proj.get('current_units',0)} –µ–¥."
                        pace_info_t = format_pace_for_report(t_item_proj)
                        report_parts.append(f"      <pre> L </pre>–ó–∞–¥–∞—á–∞: {t_item_proj['name']} ({progress_info_t})\n        <pre>  ‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info_t} {pace_info_t}".strip())
            
            # –û–±—â–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ç–µ, —á–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª public, –Ω–æ —Å–∞–º–∏ –∑–∞–¥–∞—á–∏ public
            standalone_public_tasks = [
                task for task in public_tasks_for_report 
                if not task.get("project_id") or \
                   (task.get("project_id") not in [p['id_orig'] for p in public_projects_for_report] and task.get("is_public"))
            ]
            if standalone_public_tasks:
                if not public_projects_for_report: # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                     report_parts.append("  <u>–ó–∞–¥–∞—á–∏:</u>")
                else: # –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω—É–∂–µ–Ω –æ—Ç—Å—Ç—É–ø –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                     report_parts.append("  <u>–ü—Ä–æ—á–∏–µ –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏:</u>")

                for t_item in standalone_public_tasks:
                    deadline_info = format_deadline_for_report(t_item.get('deadline'), t_item.get('status'))
                    progress_info = f"{t_item.get('current_units',0)}/{t_item.get('total_units',0)}" if t_item.get('total_units',0) > 0 else f"{t_item.get('current_units',0)} –µ–¥."
                    pace_info = format_pace_for_report(t_item)
                    report_parts.append(f"    ‚ñ´Ô∏è {t_item['name']} ({progress_info})\n      <pre>‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info} {pace_info}".strip())
            report_parts.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        # 2. –°–±–æ—Ä –õ–ò–ß–ù–´–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        owned_projects_for_report: List[Dict[str, Any]] = []
        owned_tasks_for_report: List[Dict[str, Any]] = []

        for p_id, p_data_orig in data.get("projects", {}).items():
            p_data = p_data_orig.copy()
            p_data['id_orig'] = p_id
            if str(p_data.get("owner_id")) == user_id_str and \
               not p_data.get("is_public") and \
               p_data.get("status") == "active":
                owned_projects_for_report.append(p_data)

        for t_id, t_data_orig in data.get("tasks", {}).items():
            t_data = t_data_orig.copy()
            t_data['id_orig'] = t_id
            if t_data.get("status") != "active":
                continue

            is_owner = str(t_data.get("owner_id")) == user_id_str
            is_task_not_public = not t_data.get("is_public", False)
            
            parent_project_id = t_data.get("project_id")
            parent_is_not_public_or_no_parent = True
            if parent_project_id and parent_project_id in data.get("projects", {}):
                if data["projects"][parent_project_id].get("is_public"): # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å public, –∑–∞–¥–∞—á–∞ –Ω–µ –ª–∏—á–Ω–∞—è
                    parent_is_not_public_or_no_parent = False
            
            if is_owner and is_task_not_public and parent_is_not_public_or_no_parent:
                owned_tasks_for_report.append(t_data)

        owned_projects_for_report.sort(key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower()))
        owned_tasks_for_report.sort(key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower()))
        
        if owned_projects_for_report or owned_tasks_for_report:
            report_parts.append("üë§ <b>–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</b>")
            if owned_projects_for_report:
                report_parts.append("  <u>–ü—Ä–æ–µ–∫—Ç—ã:</u>")
                for p_item in owned_projects_for_report:
                    deadline_info = format_deadline_for_report(p_item.get('deadline'), p_item.get('status'))
                    progress_info = f"{p_item.get('current_units',0)}/{p_item.get('total_units',0)}" if p_item.get('total_units',0) > 0 else f"{p_item.get('current_units',0)} –µ–¥."
                    pace_info = format_pace_for_report(p_item)
                    report_parts.append(f"    ‚ñ´Ô∏è {p_item['name']} ({progress_info})\n      <pre>‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info} {pace_info}".strip())
                    # –ó–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                    project_specific_tasks = [
                        task for task in owned_tasks_for_report 
                        if task.get("project_id") == p_item['id_orig']
                    ]
                    for t_item_proj in project_specific_tasks:
                        deadline_info_t = format_deadline_for_report(t_item_proj.get('deadline'), t_item_proj.get('status'))
                        progress_info_t = f"{t_item_proj.get('current_units',0)}/{t_item_proj.get('total_units',0)}" if t_item_proj.get('total_units',0) > 0 else f"{t_item_proj.get('current_units',0)} –µ–¥."
                        pace_info_t = format_pace_for_report(t_item_proj)
                        report_parts.append(f"      <pre> L </pre>–ó–∞–¥–∞—á–∞: {t_item_proj['name']} ({progress_info_t})\n        <pre>  ‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info_t} {pace_info_t}".strip())


            # –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ç–µ, —á–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª –ª–∏—á–Ω—ã–º —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)
            standalone_owned_tasks = [
                task for task in owned_tasks_for_report if not task.get("project_id")
            ] # –ó–∞–¥–∞—á–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —á—É–∂–∏–º –ª–∏—á–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º, —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—à–µ
            if standalone_owned_tasks:
                if not owned_projects_for_report:
                    report_parts.append("  <u>–ó–∞–¥–∞—á–∏:</u>")
                else:
                    report_parts.append("  <u>–ü—Ä–æ—á–∏–µ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏:</u>")
                for t_item in standalone_owned_tasks:
                    deadline_info = format_deadline_for_report(t_item.get('deadline'), t_item.get('status'))
                    progress_info = f"{t_item.get('current_units',0)}/{t_item.get('total_units',0)}" if t_item.get('total_units',0) > 0 else f"{t_item.get('current_units',0)} –µ–¥."
                    pace_info = format_pace_for_report(t_item)
                    report_parts.append(f"    ‚ñ´Ô∏è {t_item['name']} ({progress_info})\n      <pre>‚îî</pre>–î–µ–¥–ª–∞–π–Ω: {deadline_info} {pace_info}".strip())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if report_parts:
            greeting = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user_name}! üëã\n–í–∞—à–∞ —Å–≤–æ–¥–∫–∞ –Ω–∞ {today_date_str}:\n"
            final_report_text = greeting + "\n".join(report_parts)
            try:
                await bot.send_message(chat_id=int(user_id_str), text=final_report_text, parse_mode=ParseMode.HTML)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}.")
            except Forbidden:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                # –ú–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º
                # data["users"][user_id_str]["receive_reports"] = False
            except BadRequest as e: # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —á–∞—Ç —É–¥–∞–ª–µ–Ω
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
        else:
            logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
    
    # save_data(data) # –ï—Å–ª–∏ –º–µ–Ω—è–ª–∏ receive_reports –ø—Ä–∏ Forbidden
    logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")



# --- –ö–û–ú–ê–ù–î–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–£–ë–õ–ò–ß–ù–û–°–¢–¨–Æ –≠–õ–ï–ú–ï–ù–¢–û–í ---
async def toggle_public_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/public –ú–æ–π–ü—Ä–æ–µ–∫—Ç`")
        return

    query = " ".join(context.args)
    data = load_data()
    found_item = find_item_by_name_or_id(query, None, data) # –ò—â–µ–º –∏ —Å—Ä–µ–¥–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏ —Å—Ä–µ–¥–∏ –∑–∞–¥–∞—á

    if not found_item:
        await update.message.reply_text(f"–≠–ª–µ–º–µ–Ω—Ç '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    item_id = found_item['id']
    item_type_db = found_item['item_type_db'] # 'project' –∏–ª–∏ 'task'
    item_pool_name = "projects" if item_type_db == "project" else "tasks"
    item_name = found_item['name']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å
    # –≠—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è –Ω–µ –±—ã–ª–æ –≤ –¢–ó, –Ω–æ –æ–Ω–æ –∫–∞–∂–µ—Ç—Å—è –ª–æ–≥–∏—á–Ω—ã–º. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.
    item_owner_id = found_item.get("owner_id")
    is_admin = is_user_admin_from_data(user_id, data)
    
    # –£–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞/–≤–ª–∞–¥–µ–ª—å—Ü–∞, –∫–∞–∫ –Ω–µ –±—ã–ª–æ –≤ –¢–ó
    # if str(user_id) != str(item_owner_id) and not is_admin:
    #     await update.message.reply_text(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è '{item_name}', —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
    #     return

    current_is_public = data[item_pool_name][item_id].get("is_public", False)
    new_is_public = not current_is_public
    data[item_pool_name][item_id]["is_public"] = new_is_public
    save_data(data)

    public_status_text = "–æ–±—â–∏–º" if new_is_public else "–ª–∏—á–Ω—ã–º"
    item_type_text = "–ü—Ä–æ–µ–∫—Ç" if item_type_db == "project" else "–ó–∞–¥–∞—á–∞"
    await update.message.reply_text(f"{item_type_text} '{item_name}' —Ç–µ–ø–µ—Ä—å {public_status_text}.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {item_type_db} '{item_name}' (ID: {item_id}) –Ω–∞ {public_status_text}.")

# --- –ö–û–ú–ê–ù–î–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–û–ô –ù–ê –û–¢–ß–ï–¢–´ ---
async def reports_preference_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    if not context.args or context.args[0].lower() not in ["on", "off"]:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reports on` –∏–ª–∏ `/reports off`.")
        return

    preference = context.args[0].lower()
    data = load_data()

    if user_id not in data["users"]:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–ª /start, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        data["users"][user_id] = {"username": update.effective_user.username or f"User_{user_id}", "timezone": "UTC"} # –î–æ–±–∞–≤–∏–º is_admin?

    data["users"][user_id]["receive_reports"] = True if preference == "on" else False
    save_data(data)

    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if preference == "on" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await update.message.reply_text(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤–∞—Å —Ç–µ–ø–µ—Ä—å {status_text}.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞: {preference}.")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; data = load_data()
    user_id_str = str(user.id)
    is_admin_now = is_user_admin_from_data(user.id, data)
    if user_id_str not in data["users"]:
        data["users"][user_id_str] = {
            "username": user.username or f"User_{user_id_str}",
            "receive_reports": True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç—á–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
            "is_admin": is_admin_now,
            "timezone": "UTC" # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º UTC, –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø–æ Asia/Almaty
        }
    else:
        data["users"][user_id_str].setdefault("receive_reports", True) # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data["users"][user_id_str].update({
            "is_admin": is_admin_now,
            "username": user.username or data["users"][user_id_str].get("username", f"User_{user_id_str}")
        })
    save_data(data); logger.info(f"User {user.id} ({user.username}) started/updated. Admin: {is_admin_now}. Reports: {data['users'][user_id_str]['receive_reports']}")
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤. /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = load_data()
    is_admin_user = is_user_admin_from_data(user_id, data) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è

    admin_text_parts = []
    if is_admin_user: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –±—É–¥—É—â–µ–º
        pass # –ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è /help

    user_specific_text = ""
    if str(user_id) in data["users"] and data["users"][str(user_id)].get("receive_reports"):
        user_specific_text += "\n    `/reports off` - –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
    else:
        user_specific_text += "\n    `/reports on` - –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"


    help_msg = (
        "ü§ñ *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
        "    `/newproject` - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "    `/newtask` - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "    `/progress` - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "    `/public <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID>` - —Å–¥–µ–ª–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –æ–±—â–∏–º/–ª–∏—á–Ω—ã–º\n"
        f"    *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:*{user_specific_text}\n\n"
        "üí° *–û–±—â–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:*\n"
        "    '—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç X –¥–µ–¥–ª–∞–π–Ω Y'\n"
        "    '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É Z –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ X'\n"
        "    '–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–µ X +5'"
    )
    if admin_text_parts: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
         help_msg += "\n\nüëë *–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã*:\n" + "\n".join(admin_text_parts)

    await update.message.reply_text(help_msg, parse_mode='Markdown')

async def show_pace_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    original_message_id = query.message.message_id
    chat_id_for_reply = query.message.chat_id

    logger.debug(f"Callback –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–ø–∞: {callback_data}")

    item_id = None
    try:
        prefix_to_check = CALLBACK_SHOW_PACE_DETAILS_PREFIX + "_"
        if callback_data.startswith(prefix_to_check):
            item_id = callback_data[len(prefix_to_check):]

        if not item_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å item_id –∏–∑ callback_data: {callback_data}")
            await query.edit_message_reply_markup(reply_markup=None)
            await context.bot.send_message(chat_id=chat_id_for_reply, text="–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–ø–∞.")
            return

        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω item_id: {item_id} –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–ø–∞.")
        pace_data_key = f"pace_details_for_{item_id}"
        pace_details = context.user_data.pop(pace_data_key, None)

        if pace_details:
            details_text_md = "*–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–º–ø–µ:*"

            required_pace = pace_details.get('required')
            if required_pace:
                req_pace_val_escaped = str(required_pace).replace('`', r'\`')
                details_text_md += f"\n- –¢—Ä–µ–±—É–µ–º—ã–π —Ç–µ–º–ø: `{req_pace_val_escaped}`"

            actual_pace = pace_details.get('actual')
            if actual_pace:
                act_pace_val_escaped = str(actual_pace).replace('`', r'\`')
                details_text_md += f"\n- –í–∞—à —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: `{act_pace_val_escaped}`"

            await context.bot.send_message(
                chat_id=chat_id_for_reply,
                text=details_text_md,
                parse_mode='Markdown',
                reply_to_message_id=original_message_id
            )
            await query.edit_message_reply_markup(reply_markup=None)
            logger.debug(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ —Ç–µ–º–ø–∞ –¥–ª—è {item_id} –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        else:
            await query.edit_message_text(
                text=query.message.text + "\n\n–î–µ—Ç–∞–ª–∏ —Ç–µ–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.",
                reply_markup=None,
                parse_mode=None
            )
            logger.warning(f"–î–µ—Ç–∞–ª–∏ —Ç–µ–º–ø–∞ –¥–ª—è {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data ({pace_data_key}).")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_pace_details_callback –¥–ª—è item_id '{item_id}': {e}", exc_info=True)
        try:
            await query.edit_message_reply_markup(reply_markup=None)
            await context.bot.send_message(chat_id=chat_id_for_reply, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–ø–∞.")
        except Exception as e_final:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ show_pace_details_callback: {e_final}")

async def handle_parent_project_progress_no_thanks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –ø—Ä–æ–µ–∫—Ç—É ({query.data}).")
    try: await query.edit_message_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.")
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ edit_message_text –≤ ...no_thanks: {e}")

async def handle_parent_project_progress_yes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    parts = query.data.split('_')
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –î–ê –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {query.data}")

    if len(parts) != 6 or parts[3] != "yes":
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –î–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {query.data}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ (yes).")
        return

    project_id = parts[4]
    try:
        units_to_add = int(parts[5])
    except (IndexError, ValueError):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ units_to_add –≤ callback_data (yes): {query.data}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ (yes).")
        return

    data = load_data()
    if project_id in data.get("projects", {}):
        project_data = data["projects"][project_id]
        project_name = project_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        current_proj_units = project_data.get("current_units", 0)
        total_proj_units = project_data.get("total_units", 0)

        new_proj_units = current_proj_units + units_to_add
        if total_proj_units > 0 and new_proj_units > total_proj_units:
            new_proj_units = total_proj_units

        project_data["current_units"] = new_proj_units
        save_data(data)

        feedback_message = f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_proj_units}."
        if total_proj_units > 0: feedback_message += f" (–∏–∑ {total_proj_units})"
        await query.edit_message_text(feedback_message)
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' (ID: {project_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ +{units_to_add} —é–∑–µ—Ä–æ–º {user_id} –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        logger.warning(f"–ü—Ä–æ–µ–∫—Ç ID {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–¥–∞—á–∏ (yes).")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Union[int, None]:
    uid = update.effective_user.id; user_text = update.message.text; current_message_id = update.message.message_id
    data = load_data()
    last_conv_msg_id = context.user_data.pop(LAST_PROCESSED_IN_CONV_MSG_ID_KEY, None)
    if last_conv_msg_id == current_message_id: logger.debug(f"–î—É–±–ª—å –ø–æ—Å–ª–µ –¥–∏–∞–ª–æ–≥–∞: {current_message_id}. –ü—Ä–æ–ø—É—Å–∫."); return None
    active_conv_type = context.user_data.get(ACTIVE_CONVERSATION_KEY)
    if active_conv_type in [ADD_PROJECT_CONV_STATE_VALUE, ADD_TASK_CONV_STATE_VALUE, UPDATE_PROGRESS_CONV_STATE_VALUE]:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {uid} ('{user_text}') –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–∞–∫—Ç–∏–≤–µ–Ω –¥–∏–∞–ª–æ–≥ '{active_conv_type}')"); return None
    logger.debug(f"handle_text_message –¥–ª—è {uid}: '{user_text}' (ID: {current_message_id})")
    nlu_result = await interpret_user_input(user_text)
    if not nlu_result or "intent" not in nlu_result: await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. /help"); return None
    intent = nlu_result.get("intent"); entities = nlu_result.get("entities", {}); user_id_str = str(uid)
    logger.info(f"NLU –æ—Ç {uid}: Intent='{intent}', Entities={entities}")

    if intent == "add_project":
        name=entities.get("item_name_hint");dl_llm=entities.get("deadline")
        if name:
            parsed_dl=parse_natural_deadline_to_date(dl_llm) if dl_llm else None;final_dl=parsed_dl.strftime('%Y-%m-%d') if parsed_dl else None
            dl_msg=f"—Å –¥–µ–¥–ª–∞–π–Ω–æ–º {final_dl}" if final_dl else "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
            if dl_llm and not parsed_dl:await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{name}'. –î–µ–¥–ª–∞–π–Ω '{dl_llm}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. /newproject?");return None
            new_id=generate_id("proj");created_at=datetime.now(pytz.utc).isoformat()
            data.setdefault("projects", {})
            data["projects"][new_id]={
                "id":new_id,"name":name,"deadline":final_dl,
                "owner_id":user_id_str,"created_at":created_at,"status":"active",
                "total_units":0,"current_units":0,"last_report_day_counter":0,
                "is_public": False
            }
            save_data(data);await update.message.reply_text(f"üéâ –ü—Ä–æ–µ–∫—Ç '{name}' {dl_msg} —Å–æ–∑–¥–∞–Ω!\nID: `{new_id}`",parse_mode='Markdown')
        else:await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞. /newproject?")
        return None

    elif intent == "add_task":
        task_name=entities.get("item_name_hint");proj_hint=entities.get("project_name_hint_for_task");dl_llm=entities.get("deadline")
        if task_name:
            parsed_dl=parse_natural_deadline_to_date(dl_llm) if dl_llm else None;final_dl=parsed_dl.strftime('%Y-%m-%d') if parsed_dl else None
            dl_msg_task=f"—Å –¥–µ–¥–ª–∞–π–Ω–æ–º {final_dl}" if final_dl else "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞";proj_id,proj_fb_msg=None,"–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏"
            if proj_hint:
                found_proj=find_item_by_name_or_id(proj_hint,"project",data)
                if found_proj:proj_id=found_proj["id"];proj_fb_msg=f"–∫ –ø—Ä–æ–µ–∫—Ç—É '{found_proj['name']}'"
                else:await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{proj_hint}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–¥–∞—á–∞ '{task_name}' –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏. /newtask?")
            if dl_llm and not parsed_dl:await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_name}'. –î–µ–¥–ª–∞–π–Ω '{dl_llm}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. /newtask?");return None
            new_id=generate_id("task");created_at=datetime.now(pytz.utc).isoformat();data.setdefault("tasks",{})
            data["tasks"][new_id]={
                "id":new_id,"name":task_name,"deadline":final_dl,
                "project_id":proj_id,"owner_id":user_id_str,
                "created_at":created_at,"status":"active","total_units":0,"current_units":0,
                "is_public": False
            }
            save_data(data);await update.message.reply_text(f"üí™ –ó–∞–¥–∞—á–∞ '{task_name}' ({proj_fb_msg}) {dl_msg_task} —Å–æ–∑–¥–∞–Ω–∞!\nID: `{new_id}`",parse_mode='Markdown')
        else:await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∏–º—è –∑–∞–¥–∞—á–∏. /newtask?")
        return None

    elif intent == "update_progress":
        item_name_hint = entities.get("item_name_hint"); item_type_llm = entities.get("item_type"); progress_desc = entities.get("progress_description")

        if not item_name_hint:
            await update.message.reply_text("–ù–µ–ø–æ–Ω—è—Ç–Ω–æ, –¥–ª—è —á–µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /progress –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ."); return None

        found_item = find_item_by_name_or_id(item_name_hint, item_type_llm, data)
        if not found_item:
            await update.message.reply_text(f"–ù–µ –Ω–∞—à–µ–ª '{item_name_hint}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /progress."); return None

        if not progress_desc:
            context.user_data[ITEM_FOR_PROGRESS_UPDATE_KEY] = {
                'id': found_item['id'], 'name': found_item['name'], 'item_type_db': found_item['item_type_db'],
                'current_units': found_item.get('current_units', 0), 'total_units': found_item.get('total_units', 0),
                'llm_item_type': item_type_llm or found_item['item_type_db']
            }
            logger.info(f"–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è '{found_item['name']}'. –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ update_progress.")
            context.user_data[ACTIVE_CONVERSATION_KEY] = UPDATE_PROGRESS_CONV_STATE_VALUE
            await update.message.reply_text(f"–û–±–Ω–æ–≤–ª—è–µ–º {found_item['item_type_db']} '{found_item['name']}'.\n–ö–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å? ('+5', '50%') /cancel")
            return ASK_PROGRESS_DESCRIPTION

        item_id = found_item['id']; item_name_val = found_item['name']; item_type_db_val = found_item['item_type_db']
        current_units_val = found_item.get('current_units', 0); total_units_val = found_item.get('total_units', 0)

        prog_interp = await interpret_progress_description(progress_desc, total_units_val if total_units_val > 0 else 100)
        if not prog_interp or prog_interp.get("type") == "unknown" or prog_interp.get("value") is None:
            context.user_data[ITEM_FOR_PROGRESS_UPDATE_KEY] = {
                'id': item_id, 'name': item_name_val, 'item_type_db': item_type_db_val,
                'current_units': current_units_val, 'total_units': total_units_val,
                'llm_item_type': item_type_llm or item_type_db_val
            }
            logger.info(f"LLM2 –Ω–µ –ø–æ–Ω—è–ª–∞ '{progress_desc}' –¥–ª—è '{item_name_val}'. –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ update_progress.")
            await update.message.reply_text(f"–ù–µ —Å–º–æ–≥ —Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç—å '{progress_desc}'.")
            context.user_data[ACTIVE_CONVERSATION_KEY] = UPDATE_PROGRESS_CONV_STATE_VALUE
            await update.message.reply_text(f"–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è '{item_name_val}'? /cancel")
            return ASK_PROGRESS_DESCRIPTION

        new_calc_units = -1; prog_type = prog_interp.get("type"); prog_value_str = str(prog_interp.get("value","0")); prog_value = 0
        try: prog_value = int(float(prog_value_str))
        except ValueError: await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç LLM: {prog_value_str}."); return None

        if prog_type == "units": new_calc_units = current_units_val + prog_value
        elif prog_type == "percent":
            base = total_units_val if total_units_val > 0 else 100
            new_calc_units = round((prog_value / 100) * base)
            if total_units_val == 0 : new_calc_units = prog_value
        elif prog_type == "absolute_units_set": new_calc_units = prog_value
        elif prog_type == "complete": new_calc_units = total_units_val if total_units_val > 0 else 100

        if new_calc_units < 0: new_calc_units = 0
        if total_units_val > 0 and new_calc_units > total_units_val: new_calc_units = total_units_val
        if new_calc_units == -1: await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑: '{progress_desc}'."); return None
        if new_calc_units == current_units_val: await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è '{item_name_val}' –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({current_units_val})."); return None

        pending_info_for_confirmation = {
            'item_id': item_id,
            'item_name': item_name_val,
            'item_type_db': item_type_db_val,
            'new_current_units': new_calc_units,
            'old_current_units': current_units_val,
            'total_units': total_units_val,
            'action_type': 'update'
        }
        await ask_for_progress_confirmation(update, context, pending_info_for_confirmation)
        return None

    elif intent == "complete_item":
        item_name_hint = entities.get("item_name_hint"); item_type_llm = entities.get("item_type")
        if not item_name_hint: await update.message.reply_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å?"); return None

        found_item = find_item_by_name_or_id(item_name_hint, item_type_llm, data)
        if not found_item: await update.message.reply_text(f"–ù–µ –Ω–∞—à–µ–ª '{item_name_hint}'."); return None

        item_id=found_item['id']; item_name=found_item['name']; item_type_db=found_item['item_type_db']
        current_u=found_item.get('current_units',0); total_u=found_item.get('total_units',0)

        if found_item.get("status")=="completed":
            await update.message.reply_text(f"{item_type_db.capitalize()} '{item_name}' —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π."); return None

        new_calc_u = total_u if total_u > 0 else 100

        pending_info_for_confirmation = {
            'item_id':item_id, 'item_type_db':item_type_db, 'item_name':item_name,
            'new_current_units':new_calc_u, 'old_current_units':current_u,
            'total_units':total_u if total_u > 0 else 100,
            'action_type':'complete'
        }
        await ask_for_progress_confirmation(update, context, pending_info_for_confirmation)
        return None

    elif intent == "query_status": # <-- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ID –∏–∑ –≤—ã–≤–æ–¥–∞
        item_name_hint = entities.get("item_name_hint"); item_type_llm = entities.get("item_type")
        reply_lines = []; keyboard_markup = None
        pace_details_for_button = {}

        if item_name_hint:
            found_item = find_item_by_name_or_id(item_name_hint, item_type_llm, data)
            if not found_item: await update.message.reply_text(f"–ù–µ –Ω–∞—à–µ–ª '{item_name_hint}'."); return None

            # item_id = found_item['id'] # ID –Ω–∞–º –Ω—É–∂–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏, –Ω–æ –Ω–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
            item_id_for_button = found_item['id'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è callback_data –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–ø–∞
            item_name=found_item['name']; item_type_db=found_item['item_type_db']
            curr_u=found_item.get('current_units',0); total_u=found_item.get('total_units',0)
            status_val=found_item.get('status','–∞–∫—Ç–∏–≤–µ–Ω'); dl_str=found_item.get('deadline')
            created_at_iso = found_item.get("created_at")
            is_public_item = found_item.get("is_public", False) # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏

            s_icon = "‚úÖ" if status_val=="completed" else ("‚è≥" if status_val=="active" else "‚ùì")
            pub_icon = "üì¢" if is_public_item else "üë§" # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
            item_type_rus_single = "–ü—Ä–æ–µ–∫—Ç" if item_type_db=="project" else "–ó–∞–¥–∞—á–∞"

            # reply_lines.append(f"{s_icon} *{item_type_rus_single}: {item_name}* (ID: `{item_id}`)") # –°–¢–ê–†–ê–Ø –°–¢–†–û–ö–ê
            reply_lines.append(f"{s_icon} {pub_icon} *{item_type_rus_single}: {item_name}*") # –ù–û–í–ê–Ø –°–¢–†–û–ö–ê –±–µ–∑ ID, —Å –∏–∫–æ–Ω–∫–æ–π –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
            reply_lines.append(f"–°—Ç–∞—Ç—É—Å: {status_val.capitalize()}")
            if is_public_item:
                reply_lines[-1] += " (–û–±—â–∏–π)" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
            else:
                reply_lines[-1] += " (–õ–∏—á–Ω—ã–π)"


            if total_u>0:
                prog_perc=round((curr_u/total_u)*100)
                reply_lines.append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {curr_u}/{total_u} ({prog_perc}%)")
            elif curr_u>0:
                progress_text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {curr_u}"
                if status_val == "completed" and curr_u == 100 and total_u == 0:
                    progress_text += " (100% —É—Å–ª–æ–≤–Ω–æ)"
                reply_lines.append(progress_text)
            else: reply_lines.append("–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–ª–∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

            if dl_str:
                try:
                    dl_date = datetime.strptime(dl_str, '%Y-%m-%d').date()
                    days_left_val = (dl_date - date.today()).days
                    reply_lines.append(f"–î–µ–¥–ª–∞–π–Ω: {dl_str}")
                    if status_val != "completed":
                        if days_left_val < 0:
                            days_abs=abs(days_left_val); day_word="–¥–Ω–µ–π"
                            if days_abs % 10==1 and days_abs % 100!=11: day_word="–¥–µ–Ω—å"
                            elif 2<=days_abs % 10<=4 and (days_abs % 100<10 or days_abs % 100>=20): day_word="–¥–Ω—è"
                            reply_lines.append(f"–°—Ä–æ–∫ –∏—Å—Ç–µ–∫ {days_abs} {day_word} –Ω–∞–∑–∞–¥! üÜò")
                        elif days_left_val == 0: reply_lines.append("–°—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è! üî•")
                        else: reply_lines.append(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left_val} üóìÔ∏è")
                except ValueError: reply_lines.append(f"–î–µ–¥–ª–∞–π–Ω: {dl_str} (–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)")
            else: reply_lines.append("–î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            forecast_str = None # –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—é–¥–∞

            if status_val == "active" and dl_str and created_at_iso and total_u > 0:
                try:
                    created_at_dt = datetime.fromisoformat(created_at_iso.replace("Z", "+00:00"))
                    created_date = created_at_dt.date()
                    deadline_date = datetime.strptime(dl_str, '%Y-%m-%d').date()
                    today = date.today()

                    total_days_planned = (deadline_date - created_date).days
                    days_passed = (today - created_date).days
                    days_left_for_calc = (deadline_date - today).days
                    units_left = total_u - curr_u

                    if total_days_planned >= 0 and curr_u < total_u:
                        required_pace = None; actual_pace = None
                        required_pace_text = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"; actual_pace_text = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

                        if units_left <= 0: required_pace_text = "–≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ!"
                        elif days_left_for_calc > 0:
                            required_pace = units_left / days_left_for_calc
                            required_pace_text = f"{required_pace:.2f} –µ–¥./–¥–µ–Ω—å"
                        else: required_pace_text = "—Å—Ä–æ–∫ –≤—ã—à–µ–ª"

                        if curr_u > 0:
                            if days_passed > 0:
                                actual_pace = curr_u / days_passed
                                actual_pace_text = f"{actual_pace:.2f} –µ–¥./–¥–µ–Ω—å"
                            elif days_passed == 0: actual_pace_text = "—Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
                            else: actual_pace_text = "–ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å—Ç–∞—Ä—Ç–∞ (?)"
                        elif curr_u == 0 and days_passed >= 0 : actual_pace_text = "–µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ"
                        else: actual_pace_text = "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞"

                        pace_details_for_button['required'] = required_pace_text
                        pace_details_for_button['actual'] = actual_pace_text

                        if required_pace_text == "–≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ!": forecast_str = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≤—Å—ë —Å–¥–µ–ª–∞–Ω–æ!"
                        elif required_pace_text == "—Å—Ä–æ–∫ –≤—ã—à–µ–ª": forecast_str = "–°—Ä–æ–∫ –≤—ã—à–µ–ª, –Ω–µ —É—Å–ø–µ–ª–∏. üò•"
                        elif actual_pace_text == "—Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è":
                             forecast_str = "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç! üëç" if units_left > 0 else "–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è! üéâ"
                        elif actual_pace_text == "–ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å—Ç–∞—Ä—Ç–∞ (?)": forecast_str = "–ù–µ–æ–±—ã—á–Ω–æ, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å!"
                        elif actual_pace_text not in ["–µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ", "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞"] and required_pace is not None and actual_pace is not None:
                            if actual_pace >= required_pace: forecast_str = "–£—Å–ø–µ–≤–∞–µ—Ç–µ! üëç"
                            else: forecast_str = "–ù—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å—Å—è! üèÉüí®"

                        if forecast_str: reply_lines.append(f"–ü—Ä–æ–≥–Ω–æ–∑: {forecast_str}")
                        else:
                            if pace_details_for_button.get('required') and pace_details_for_button.get('actual'):
                                reply_lines.append(f"–¢–µ–º–ø: (—Å–º. –¥–µ—Ç–∞–ª–∏)")

                        if pace_details_for_button:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º item_id_for_button –¥–ª—è callback_data
                            pace_data_key = f"pace_details_for_{item_id_for_button}"
                            context.user_data[pace_data_key] = pace_details_for_button
                            keyboard_buttons = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ–º–ø–∞", callback_data=f"{CALLBACK_SHOW_PACE_DETAILS_PREFIX}_{item_id_for_button}")]]
                            keyboard_markup = InlineKeyboardMarkup(keyboard_buttons)
                    elif curr_u >= total_u and total_u > 0 :
                         reply_lines.append("–ü—Ä–æ–≥–Ω–æ–∑: –ó–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ")
                    else:
                        reply_lines.append("–¢–µ–º–ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∏ –æ–±—â–∏–µ –µ–¥–∏–Ω–∏—Ü—ã).")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–µ–º–ø–∞ –¥–ª—è {item_id_for_button}: {e}", exc_info=True) # –ò—Å–ø–æ–ª—å–∑—É–µ–º item_id_for_button
                    reply_lines.append("–¢–µ–º–ø: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ.")
            elif status_val == "active":
                 reply_lines.append("–¢–µ–º–ø: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å (–Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞, —Ü–µ–ª–∏ –≤ –µ–¥. –∏–ª–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è).")

            if item_type_db == "task" and found_item.get("project_id"):
                proj_id = found_item.get("project_id")
                proj = data.get("projects",{}).get(proj_id)
                if proj: reply_lines.append(f"–ü—Ä–æ–µ–∫—Ç: {proj.get('name','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")

        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —É–∫–∞–∑–∞–ª –∏–º—è, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏
            items_found_for_listing = False
            user_id_str_for_list = str(uid) # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id_str –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏

            # –°–ü–ò–°–ö–ò –û–ë–©–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í
            public_projects_list: List[dict] = []
            for p_id, p_data in data.get("projects", {}).items():
                if p_data.get("is_public") and p_data.get("status") == "active":
                    # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –Ω–æ –Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    p_data_copy = p_data.copy()
                    p_data_copy['id_internal_sort'] = p_id
                    public_projects_list.append(p_data_copy)

            public_tasks_list: List[dict] = []
            for t_id, t_data in data.get("tasks", {}).items():
                # –ó–∞–¥–∞—á–∞ –æ–±—â–∞—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å–∞–º–∞ public –ò–õ–ò –µ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç public
                is_task_standalone_public = t_data.get("is_public")
                parent_project_id = t_data.get("project_id")
                is_task_parent_project_public = False
                if parent_project_id and parent_project_id in data.get("projects", {}):
                    if data["projects"][parent_project_id].get("is_public"):
                        is_task_parent_project_public = True
                
                if (is_task_standalone_public or is_task_parent_project_public) and t_data.get("status") == "active":
                    t_data_copy = t_data.copy()
                    t_data_copy['id_internal_sort'] = t_id
                    public_tasks_list.append(t_data_copy)


            if public_projects_list or public_tasks_list:
                reply_lines.append("\nüì¢ *–û–±—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:*")
                items_found_for_listing = True
                if public_projects_list:
                    reply_lines.append("  *–ü—Ä–æ–µ–∫—Ç—ã:*")
                    for p_item in sorted(public_projects_list, key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower())):
                        dl_info = f"(–¥–æ {p_item['deadline']})" if p_item.get('deadline') else "(–±–µ–∑ —Å—Ä–æ–∫–∞)"
                        prog = ""
                        if p_item.get("total_units", 0) > 0:
                            prog = f" [{p_item.get('current_units',0)}/{p_item['total_units']}]"
                        elif p_item.get('current_units', 0) > 0 :
                            prog = f" [{p_item.get('current_units',0)} –µ–¥.]"
                        reply_lines.append(f"    ‚ñ´Ô∏è {p_item['name']} {dl_info}{prog}")
                if public_tasks_list:
                    reply_lines.append("  *–ó–∞–¥–∞—á–∏:*")
                    for t_item in sorted(public_tasks_list, key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower())):
                        dl_info = f"(–¥–æ {t_item['deadline']})" if t_item.get('deadline') else "(–±–µ–∑ —Å—Ä–æ–∫–∞)"
                        prog = ""
                        if t_item.get("total_units", 0) > 0:
                            prog = f" [{t_item.get('current_units',0)}/{t_item['total_units']}]"
                        elif t_item.get('current_units', 0) > 0:
                             prog = f" [{t_item.get('current_units',0)} –µ–¥.]"
                        project_link_str = ""
                        if t_item.get("project_id"):
                            project_data_for_task = data.get("projects", {}).get(t_item["project_id"])
                            if project_data_for_task:
                                project_link_str = f" (–ü—Ä–æ–µ–∫—Ç: _{project_data_for_task.get('name','?')} _)"
                        reply_lines.append(f"    ‚ñ´Ô∏è {t_item['name']}{project_link_str} {dl_info}{prog}")


            # –°–ü–ò–°–ö–ò –õ–ò–ß–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
            user_owned_projects: List[dict] = []
            for p_id, p_data in data.get("projects", {}).items():
                if str(p_data.get("owner_id")) == user_id_str_for_list and \
                   not p_data.get("is_public") and \
                   p_data.get("status") == "active":
                    p_data_copy = p_data.copy()
                    p_data_copy['id_internal_sort'] = p_id
                    user_owned_projects.append(p_data_copy)

            user_owned_tasks: List[dict] = []
            for t_id, t_data in data.get("tasks", {}).items():
                # –ó–∞–¥–∞—á–∞ –ª–∏—á–Ω–∞—è, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —é–∑–µ—Ä—É, —Å–∞–º–∞ –Ω–µ public, –ò –µ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) —Ç–æ–∂–µ –Ω–µ public
                is_task_owner = str(t_data.get("owner_id")) == user_id_str_for_list
                is_task_not_public = not t_data.get("is_public")
                
                parent_project_id = t_data.get("project_id")
                parent_is_not_public_or_no_parent = True
                if parent_project_id and parent_project_id in data.get("projects", {}):
                    if data["projects"][parent_project_id].get("is_public"):
                        parent_is_not_public_or_no_parent = False # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –ø—É–±–ª–∏—á–Ω—ã–π, —Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –≤ –ª–∏—á–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é

                if is_task_owner and is_task_not_public and parent_is_not_public_or_no_parent and \
                   t_data.get("status") == "active":
                    t_data_copy = t_data.copy()
                    t_data_copy['id_internal_sort'] = t_id
                    user_owned_tasks.append(t_data_copy)

            if user_owned_projects or user_owned_tasks:
                reply_lines.append("\nüë§ *–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:*")
                items_found_for_listing = True
                if user_owned_projects:
                    reply_lines.append("  *–ü—Ä–æ–µ–∫—Ç—ã:*")
                    for p_item in sorted(user_owned_projects, key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower())):
                        dl_info = f"(–¥–æ {p_item['deadline']})" if p_item.get('deadline') else "(–±–µ–∑ —Å—Ä–æ–∫–∞)"
                        prog = ""
                        if p_item.get("total_units", 0) > 0:
                            prog = f" [{p_item.get('current_units',0)}/{p_item['total_units']}]"
                        elif p_item.get('current_units', 0) > 0 :
                            prog = f" [{p_item.get('current_units',0)} –µ–¥.]"
                        # reply_lines.append(f"    `{p_item['id_internal_sort']}`: {p_item['name']} {dl_info}{prog}") # –°–¢–ê–†–û–ï —Å ID
                        reply_lines.append(f"    ‚ñ´Ô∏è {p_item['name']} {dl_info}{prog}") # –ù–û–í–û–ï –±–µ–∑ ID
                if user_owned_tasks:
                    reply_lines.append("  *–ó–∞–¥–∞—á–∏:*")
                    for t_item in sorted(user_owned_tasks, key=lambda x: (x.get("deadline") or "9999", x.get("name", "").lower())):
                        dl_info = f"(–¥–æ {t_item['deadline']})" if t_item.get('deadline') else "(–±–µ–∑ —Å—Ä–æ–∫–∞)"
                        prog = ""
                        if t_item.get("total_units", 0) > 0:
                            prog = f" [{t_item.get('current_units',0)}/{t_item['total_units']}]"
                        elif t_item.get('current_units', 0) > 0:
                             prog = f" [{t_item.get('current_units',0)} –µ–¥.]"
                        project_link_str = ""
                        if t_item.get("project_id"):
                            project_data_for_task = data.get("projects", {}).get(t_item["project_id"])
                            if project_data_for_task:
                                project_link_str = f" (–ü—Ä–æ–µ–∫—Ç: _{project_data_for_task.get('name','?')} _)"
                        # reply_lines.append(f"    `{t_item['id_internal_sort']}`: {t_item['name']}{project_link_str} {dl_info}{prog}") # –°–¢–ê–†–û–ï —Å ID
                        reply_lines.append(f"    ‚ñ´Ô∏è {t_item['name']}{project_link_str} {dl_info}{prog}") # –ù–û–í–û–ï –±–µ–∑ ID

            if not items_found_for_listing:
                reply_lines.append("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–∏ –æ–±—â–∏—Ö, –Ω–∏ –ª–∏—á–Ω—ã—Ö).")


        if reply_lines:
            final_reply_text = "\n".join(reply_lines)
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏
            # if not item_name_hint and items_found_for_listing :
            #     final_reply_text = "üîç *–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n" + final_reply_text
            await update.message.reply_text(final_reply_text, parse_mode='Markdown', reply_markup=keyboard_markup)
        else:
             await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
        return None

    else:
        await update.message.reply_text(f"–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{user_text}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.")
    return None


def main():
    builder = Application.builder().token(BOT_TOKEN)
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π JobQueue (job_queue=None).")

    application = builder.build()

    # Conversation Handlers (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    add_project_conv = ConversationHandler(
        entry_points=[CommandHandler('newproject', new_project_command)],
        states={ ASK_PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_project_name, block=True)],
                 ASK_PROJECT_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_project_deadline, block=True)]},
        fallbacks=[CommandHandler('cancel', universal_cancel)], name="project_creation"
    )
    add_task_conv = ConversationHandler(
        entry_points=[CommandHandler('newtask', new_task_command)],
        states={ ASK_TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_name, block=True)],
                 ASK_TASK_PROJECT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_project_link, block=True)],
                 ASK_TASK_DEADLINE_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_deadline, block=True)]},
        fallbacks=[CommandHandler('cancel', universal_cancel)], name="task_creation"
    )
    update_progress_conv = ConversationHandler(
        entry_points=[CommandHandler('progress', progress_command)],
        states={
            ASK_PROGRESS_ITEM_TYPE: [CallbackQueryHandler(received_progress_item_type, pattern=r"^progress_item_type_(project|task|cancel)$")],
            ASK_PROGRESS_ITEM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_progress_item_name_dialog, block=True)],
            ASK_PROGRESS_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_progress_description_dialog, block=True)],
        },
        fallbacks=[CommandHandler('cancel', universal_cancel)], name="update_progress_conversation"
    )

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))

    # --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
    application.add_handler(CommandHandler("public", toggle_public_command))
    application.add_handler(CommandHandler("reports", reports_preference_command))
    # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---

    application.add_handler(add_project_conv, group=1)
    application.add_handler(add_task_conv, group=1)
    application.add_handler(update_progress_conv, group=1)

    application.add_handler(CallbackQueryHandler(confirm_progress_update_callback, pattern=r"^confirm_progress_(yes|no)$"), group=1)
    application.add_handler(CallbackQueryHandler(show_pace_details_callback, pattern=f"^{CALLBACK_SHOW_PACE_DETAILS_PREFIX}_"), group=1)
    application.add_handler(CallbackQueryHandler(handle_parent_project_progress_no_thanks, pattern=f"^{CALLBACK_UPDATE_PARENT_PROJECT_PREFIX}_no_"), group=1)
    application.add_handler(CallbackQueryHandler(handle_parent_project_progress_yes, pattern=f"^{CALLBACK_UPDATE_PARENT_PROJECT_PREFIX}_yes_"), group=1)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message), group=2)

    job_queue = application.job_queue
    if job_queue: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ job_queue —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        report_time_utc = time(hour=4, minute=30, tzinfo=pytz.utc) # 9:30 Almaty (UTC+5) = 4:30 UTC
                                                               # –ï—Å–ª–∏ Almaty UTC+6, —Ç–æ 3:30 UTC
        # –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ê–ª–º–∞—Ç—ã. –ï—Å–ª–∏ Asia/Almaty —ç—Ç–æ UTC+5, —Ç–æ 9:30 - 5 = 4:30 UTC
        # –ï—Å–ª–∏ Asia/Almaty —ç—Ç–æ UTC+6, —Ç–æ 9:30 - 6 = 3:30 UTC
        # –Ø –ø–æ—Å—Ç–∞–≤–ª—é –¥–ª—è UTC+5 (—Ç–æ –µ—Å—Ç—å 4:30 UTC) –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.
        # –í–ê–ñ–ù–û: JobQueue —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ —è–≤–Ω–æ –¥–ª—è —Å–∞–º–æ–π JobQueue
        # –õ–∏–±–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º TZ.
        # –ù–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ UTC.

        # –î–∞–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å tzinfo –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        almaty_tz = pytz.timezone('Asia/Almaty')
        report_time_almaty = time(hour=9, minute=30, tzinfo=almaty_tz)

        job_queue.run_daily(
            send_daily_reports,
            time=report_time_almaty, # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            name="daily_report_job"
        )
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {report_time_almaty.strftime('%H:%M %Z%z')}")
    else:
        logger.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    # --- –ö–û–ù–ï–¶ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    if not os.getenv('GEMINI_API_KEY'): logger.error("GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"); exit()
    try: import pytz; import tzlocal
    except ImportError: logger.error("pytz –∏–ª–∏ tzlocal –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! `pip install pytz tzlocal`"); exit()
    if not os.getenv('TZ'): 
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ Python, –µ—Å–ª–∏ TZ –Ω–µ –∑–∞–¥–∞–Ω–∞
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ,
        # –Ω–æ –¥–ª—è JobQueue –º—ã —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º tzinfo.
        try:
            os.environ['TZ'] = tzlocal.get_localzone_name()
            time.tzset() # Unix-like systems
            logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–π TZ –¥–ª—è Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ '{os.environ['TZ']}' (–ª–æ–∫–∞–ª—å–Ω—ã–π).")
        except Exception as e:
            os.environ['TZ'] = 'UTC' # Fallback
            time.tzset()
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π TZ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'UTC'. –û—à–∏–±–∫–∞: {e}")
    else: logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TZ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.getenv('TZ')}")
    main()